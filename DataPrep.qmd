---
title: "DataPrep"
author: "PMagoto"
format: html
editor: visual
---

### Opening the correct packages:

```{r setup, include=FALSE, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(ggplot2) 
library(tidyverse)
library(DigitalMethodsData)
library(ggmap)
library(tidygeocoder)
library(leaflet)
library(leaflet.extras)
library(leaftime)
library(leaflet.providers)
library(spatstat)
library(sf)
```

### Registering my Google Key:

```{r}
#register google key 
register_google(key = Sys.getenv("GOOGLE_KEY"))
```

### inserting data sets and prepping them to be geo-coded:

```{r}
locations <- read.csv("locations3.csv") %>% 
  mutate(full.address = paste0(street.address,","," ", city, ",", " ", state))
entries <- read.csv("entries3.csv") %>% 
  mutate(full.address = paste0(street.address,","," ", city, ",", " ", state))
people <- read.csv("people3.csv") #no full address is needed
write.csv(locations, file = "locationsprepped.csv")#prep for geocode with ful address and savw locally
write.csv(entries, file = "entriesprepped.csv") #prep for geocode with ful address and savw locally
```

Geo-coding data:

```{r}
locationsprepped <- read.csv("locationsprepped.csv") %>% 
  mutate_geocode(full.address, output = "latlon", source = "google")
enttriesprepped <- read.csv("entriesprepped.csv") %>% 
  mutate_geocode(full.address, output = "latlon", source = "google")
write.csv(locationsprepped, file="locations.final.csv")
write.csv(enttriesprepped, file="entries.final")
```

This is the code you will use in anything else, this data is already geo-coded so you don't accidentally over run your data.

```{r}
entries <- read.csv("entries.final.csv")
locations <- read.csv("locations.final.csv")
```

### Creating data-frames for polygons to represent Black and White Storyville:

```{r}
longitudeBSV <- c(-90.080601, -90.079958, -90.077019, -90.077834) #longitude for the polygon
latitudeBSV <- c(29.954152,29.955334,29.954153,29.952984) #latitude for the polygon
lonlatBSV <- as.data.frame(cbind(longitudeBSV,latitudeBSV)) #create dataframe for the polygon
saveRDS(lonlatBSV, "BSVpolygon.rds")
longitudeWSV <- c(-90.076034, -90.073988, -90.070663,-90.072809)
latitudeWSV <- c(29.959378, 29.961675,29.959434,29.957063)
lonlatSV <- as.data.frame(cbind(longitudeWSV,latitudeWSV))
saveRDS(lonlatSV, "SVpolygon.rds")
#turns out everything above this is useless because I couldnt figure out how to save this in a conce manner so I have to load BELOW into EVERYTHING I do for leaflet unless someone can give me a better option. 
SVpolygon <- matrix(c(-90.076779, 29.958558, -90.073984, 29.961689, -90.070555, 29.959363, -90.073466, 29.956301, -90.076779, 29.958558), ncol = 2, byrow = TRUE) #opening AND CLOSING polygons to create full shpae, thats why ti wasnt working before
BSVpolygon <- matrix(c(-90.080601, 29.95415, -90.079958, 29.955334, -90.077019, 29.954153, -90.077834, 29.952984, -90.080601, 29.954152), ncol = 2, byrow = TRUE) #opening AND CLOSING polygons to create full shpae, thats why ti wasnt working before
```

Notes:

-   black Storyville coords: using the city ordinance 4118 to create my data, 1917.

    -   bottom left:29.954152,-90.080601

    -   top left: 29.955334,-90.079958

    -   top right:29.954153,-90.077019

    -   bottom right: 29.952984,-90.077834

    -   center: ?

-   White Storyville Coords: using the city ordinance 4118 and the introductions to the Blue Books to create this data. 1897-1917.

    -   bottom left: 29.959378,-90.076034 (Corner of Canal St. and N. Robertson St.)

    -   top left: 29.961675,-90.073988 (Corner of N. Robertson and St. Louis St)

    -   top right:29.959434,-90.070663 (Corner of St. Louis Street and N. Basin St.)

    -   bottom right:29.957063,-90.072809 (Corner of N. basin St and Canal St.)

    -   center of WSV: 29.958675,-90.073182

### Leaflet codes to start an interactive map:

```{r}
SVbase <- leaflet() %>% 
  addProviderTiles("CartoDB.Positron") %>%
  addPolygons(data = SVpolygon, color = "gray3", weight = 2, fillColor = "gray3", fillOpacity = 0.2)
SVbase
```

```{r}
leafletBSV <- leaflet() %>% 
  addProviderTiles("CartoDB.Positron") %>% 
  addPolygons(data= BSVpolygon, color = "red", weight = 2, fillColor = "red", fillOpacity = 0.2) %>% 
  addPolygons(data = SVpolygon, color = "gray3", weight = 2, fillColor = "gray3", fillOpacity = 0.2)
leafletBSV
```

### Load some icons:

```{r}
blackicon <- makeIcon(iconUrl = "icons/blackicon.png", iconWidth = 24, iconHeight = 24)
whiteicon <- makeIcon(iconUrl = "icons/whiteicon.png", iconWidth = 24, iconHeight = 24)
```

### Sort though data to find specific points:

#### Sorting only to named businesses:

```{r}
buisinessnametest <- entries %>% #this is creating only names locations
  filter(!is.na(house.name) & trimws(house.name) != "") %>%
  group_by(house.name) %>% 
  summ
```

#### Sorting by year:

```{r}
yeartest <- entries %>% 
  group_by(year) %>% 
  summarise()

entries.1900 <- entries %>% 
  group_by(year) %>% 
  filter(year == 1900)


##people.race <- people %>% 
  ##group_by(race.id) %>% 
race.entries <- entries %>% 
  group_by(lat, lon, race.id, year) %>% 
  summarise(race.count = n()) %>% 
  group_by(race.id) %>% 
  mutate(scaled_count = scale(race.count)) %>% 
  ungroup()
```

```{r}

```
