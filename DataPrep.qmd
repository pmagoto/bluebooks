---
title: "DataPrep"
author: "PMagoto"
format: html
editor: visual
---

### Opening the correct packages:

```{r setup, include=FALSE, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(ggplot2) 
library(tidyverse)
library(DigitalMethodsData)
library(ggmap)
library(tidygeocoder)
library(leaflet)
library(leaflet.extras)
library(leaftime)
library(leaflet.providers)
library(spatstat)
library(sf)
```

### Registering my Google Key:

```{r}
#register google key 
register_google(key = Sys.getenv("GOOGLE_KEY"))
```

### inserting data sets and prepping them to be geo-coded:

```{r}
locations <- read.csv("locations3.csv") %>% 
  mutate(full.address = paste0(street.address,","," ", city, ",", " ", state))
entries <- read.csv("entries3.csv") %>% 
  mutate(full.address = paste0(street.address,","," ", city, ",", " ", state))
people <- read.csv("people3.csv") #no full address is needed
write.csv(locations, file = "locationsprepped.csv")#prep for geocode with ful address and savw locally
write.csv(entries, file = "entriesprepped.csv") #prep for geocode with ful address and savw locally

```

Geo-coding data:

```{r}
locationsprepped <- read.csv("locationsprepped.csv") %>% 
  mutate_geocode(full.address, output = "latlon", source = "google")
enttriesprepped <- read.csv("entriesprepped.csv") %>% 
  mutate_geocode(full.address, output = "latlon", source = "google")
write.csv(locationsprepped, file="locations.final.csv")
write.csv(enttriesprepped, file="entries.final")
```

This is the code you will use in anything else, this data is already geo-coded so you don't accidentally over run your data.

```{r}
entries <- read.csv("entries.final.csv")
locations <- read.csv("locations.final.csv")
people <- read.csv("people3.csv")
```

### Creating data-frames for polygons to represent Black and White Storyville:

```{r}
longitudeBSV <- c(-90.080601, -90.079958, -90.077019, -90.077834) #longitude for the polygon
latitudeBSV <- c(29.954152,29.955334,29.954153,29.952984) #latitude for the polygon
lonlatBSV <- as.data.frame(cbind(longitudeBSV,latitudeBSV)) #create dataframe for the polygon
saveRDS(lonlatBSV, "BSVpolygon.rds")
longitudeWSV <- c(-90.076034, -90.073988, -90.070663,-90.072809)
latitudeWSV <- c(29.959378, 29.961675,29.959434,29.957063)
lonlatSV <- as.data.frame(cbind(longitudeWSV,latitudeWSV))
saveRDS(lonlatSV, "SVpolygon.rds")
#turns out everything above this is useless because I couldnt figure out how to save this in a conce manner so I have to load BELOW into EVERYTHING I do for leaflet unless someone can give me a better option. 
SVpolygon <- matrix(c(-90.076779, 29.958558, -90.073984, 29.961689, -90.070555, 29.959363, -90.073466, 29.956301, -90.076779, 29.958558), ncol = 2, byrow = TRUE) #opening AND CLOSING polygons to create full shpae, thats why ti wasnt working before
BSVpolygon <- matrix(c(-90.080601, 29.95415, -90.079958, 29.955334, -90.077019, 29.954153, -90.077834, 29.952984, -90.080601, 29.954152), ncol = 2, byrow = TRUE) #opening AND CLOSING polygons to create full shpae, thats why ti wasnt working before
```

Notes:

-   black Storyville coords: using the city ordinance 4118 to create my data, 1917.

    -   bottom left:29.954152,-90.080601

    -   top left: 29.955334,-90.079958

    -   top right:29.954153,-90.077019

    -   bottom right: 29.952984,-90.077834

    -   center: ?

-   White Storyville Coords: using the city ordinance 4118 and the introductions to the Blue Books to create this data. 1897-1917.

    -   bottom left: 29.959378,-90.076034 (Corner of Canal St. and N. Robertson St.)

    -   top left: 29.961675,-90.073988 (Corner of N. Robertson and St. Louis St)

    -   top right:29.959434,-90.070663 (Corner of St. Louis Street and N. Basin St.)

    -   bottom right:29.957063,-90.072809 (Corner of N. basin St and Canal St.)

    -   center of WSV: 29.958675,-90.073182

### Leaflet codes to start an interactive map:

```{r}
SVbasemap <- leaflet() %>% 
  addProviderTiles("CartoDB.Positron") %>%
  addPolygons(data = SVpolygon, color = "gray3", weight = 2, fillColor = "gray3", fillOpacity = 0.2)
SVbasemap
```

```{r}
leafletBSV <- leaflet() %>% 
  addProviderTiles("CartoDB.Positron") %>% 
  addPolygons(data= BSVpolygon, color = "red", weight = 2, fillColor = "red", fillOpacity = 0.2) %>% 
  addPolygons(data = SVpolygon, color = "gray3", weight = 2, fillColor = "gray3", fillOpacity = 0.2)
leafletBSV
```

### Load some icons:

```{r}
blackicon <- makeIcon(iconUrl = "icons/blackicon.png", iconWidth = 24, iconHeight = 24)
whiteicon <- makeIcon(iconUrl = "icons/whiteicon.png", iconWidth = 24, iconHeight = 24)
```

### Sort though data to find specific points:

#### Sorting only to named businesses:

```{r}
#buisinessnametest <- entries %>% #this is creating only names locations
  #filter(!is.na(house.name) & trimws(house.name) != "") %>%
  #group_by(house.name) %>% 
 # summ
```

#### Sorting in some ways to try and get something to work:

```{r}
yeartest <- entries %>% 
  group_by(year) %>% 
  summarise()

entries.1900 <- entries %>% 
  group_by(year) %>% 
  filter(year == 1900)

race.entries <- entries %>% 
  group_by(lat, lon, race.id, year) %>% 
  summarise(race.count = n()) %>% 
  group_by(race.id) %>% 
  mutate(scaled_count = scale(race.count)) %>% 
  ungroup()

pal <- colorNumeric(palette = 'viridis', domain = race.entries$scaled_count) 
```

```{r}

SVrace <- SVbasemap %>%
  addCircleMarkers(
    data = race.entries,
    ~lon, ~lat,
    radius = ~scaled_count * 5, # Scale the radius for better visualization
    color = ~pal(scaled_count),
    stroke = FALSE, fillOpacity = 0.7,
    popup = ~paste("Race ID:", race.id, "<br>Year:", year, "<br>Count:", race.count)
  ) %>%
  addLegend(
    "bottomright", pal = pal, values = ~scaled_count,
    title = "Race Density",
    opacity = 1
  )
```

```{r}
race.entries <- entries %>% 
  group_by(lat, lon, race.id, year) %>% 
  summarise(race.count = n()) %>% 
  group_by(race.id) %>% 
  mutate(scaled_count = scale(as.numeric(race.count))) %>% 
  ungroup()

# Create a color palette for the density
pal <- colorNumeric(palette = "viridis", domain = race.entries$scaled_count)


simple.race <-leaflet(data = race.entries) %>%
  addTiles() %>%
  addCircleMarkers(
    ~lon, ~lat,
    radius = ~race.count, # Use race.count for the radius
    popup = ~paste("Race ID:", race.id, "<br>Year:", year, "<br>Count:", race.count)
  )
simple.race
```

```{r}
#this is from copilot idk what to do 
# Load necessary libraries
library(dplyr)
library(leaflet)
library(sf)

# Convert SVpolygon matrix to a spatial object
SVpolygon <- matrix(c(-90.076779, 29.958558, -90.073984, 29.961689, -90.070555, 29.959363, -90.073466, 29.956301, -90.076779, 29.958558), ncol = 2, byrow = TRUE)
SVpolygon <- st_polygon(list(SVpolygon)) %>% st_sfc() %>% st_sf()

# Prepare the race.entries data frame
race.entries <- entries %>% 
  group_by(lat, lon, race.id, year) %>% 
  summarise(race.count = n()) %>% 
  group_by(race.id) %>% 
  mutate(scaled_count = scale(race.count)) %>% 
  ungroup()

# Create the base map with the polygon
SVracebase <- leaflet() %>% 
  addProviderTiles("CartoDB.Positron") %>%
  addPolygons(data = SVpolygon, color = "gray3", weight = 2, fillColor = "gray3", fillOpacity = 0.2)

# Add circle markers for each year as separate layers
years <- unique(race.entries$year)
for (year in years) {
  year_data <- race.entries %>% filter(year == !!year)
  SVracebase <- SVracebase %>%
    addCircleMarkers(
      data = year_data,
      ~lon, ~lat,
      radius = ~race.count, # Use race.count for the radius
      popup = ~paste("Race ID:", race.id, "<br>Year:", year, "<br>Count:", race.count),
      group = as.character(year)
    )
}

# Add layers control to toggle between years
SVrace.map.new <- SVracebase %>%
  addLayersControl(
    overlayGroups = as.character(years),
    options = layersControlOptions(collapsed = FALSE)
  )

# Print the map
SVrace.map.new
```

Load icons for Leaflet

```{r}
icon.black <- makeIcon(iconUrl = "icons/blackicon.png", iconWidth = 24, iconHeight = 24)
icon.darkblue <- makeIcon(iconUrl = "icons/darkblue.png", iconWidth = 24, iconHeight = 24)
icon.darkgreen <- makeIcon(iconUrl = "icons/darkgreenicon.png", iconWidth = 24, iconHeight = 24)
icon.darkpurple <- makeIcon(iconUrl = "icons/darkpurpleicon.png", iconWidth = 24, iconHeight = 24)
icon.lightblue <- makeIcon(iconUrl = "icons/lightblueicon.png", iconWidth = 24, iconHeight = 24)
icon.pink <- makeIcon(iconUrl = "icons/pinkicon.png", iconWidth = 24, iconHeight = 24)
icon.purple <- makeIcon(iconUrl = "icons/purple.png", iconWidth = 24, iconHeight = 24)
icon.white <- makeIcon(iconUrl = "icons/whiteicon.png", iconWidth = 24, iconHeight = 24)
```

```{r}
race.by.year <- entries %>% 
  group_by(year, race.id) %>%
  summarise(count= n()) %>% 
  filter (!is.na(count))
```
