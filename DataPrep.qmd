---
title: "DataPrep"
author: "PMagoto"
format: html
editor: visual
---

### Opening the correct packages:

```{r setup, include=FALSE, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(ggplot2) 
library(tidyverse)
library(DigitalMethodsData)
library(ggmap)
library(tidygeocoder)
library(leaflet)
library(leaflet.extras)
library(leaftime)
library(leaflet.providers)
library(spatstat)
library(sf)
```

### Registering my Google Key:

```{r}
#register google key 
register_google(key = Sys.getenv("GOOGLE_KEY"))
```

### inserting data sets and prepping them to be geo-coded:

```{r}
locations <- read.csv("locations3.csv") %>% 
  mutate(full.address = paste0(street.address,","," ", city, ",", " ", state))
entries <- read.csv("entries3.csv") %>% 
  mutate(full.address = paste0(street.address,","," ", city, ",", " ", state))
people <- read.csv("people3.csv") #no full address is needed
write.csv(locations, file = "locationsprepped.csv")#prep for geocode with ful address and savw locally
write.csv(entries, file = "entriesprepped.csv") #prep for geocode with ful address and savw locally
```

### Geo-coding data:

```{r}
locationsprepped <- read.csv("locationsprepped.csv") %>% 
  mutate_geocode(full.address, output = "latlon", source = "google")
enttriesprepped <- read.csv("entriesprepped.csv") %>% 
  mutate_geocode(full.address, output = "latlon", source = "google")
write.csv(locationsprepped, file="locations.final.csv")
write.csv(enttriesprepped, file="entries.final")
```

### This is the code you will use in anything else, this data is already geo-coded so you don't accidentally over run your data.

```{r}
entries <- read.csv("entries.final.csv")
locations <- read.csv("locations.final.csv")
people <- read.csv("people3.csv")
```

### Creating data-frames for polygons to represent Black and White Storyville:

```{r}
#Notes:
#black Storyville coords: using the city ordinance 4118 to create my data, 1917.
#bottom left:29.954152,-90.080601
#top left: 29.955334,-90.079958
#top right:29.954153,-90.077019
#bottom right: 29.952984,-90.077834
#center: ?
#White Storyville Coords: using the city ordinance 4118 and the introductions to the Blue Books to create this data. 1897-1917.
#bottom left: 29.959378,-90.076034 (Corner of Canal St. and N. Robertson St.)
#top left: 29.961675,-90.073988 (Corner of N. Robertson and St. Louis St)
#top right:29.959434,-90.070663 (Corner of St. Louis Street and N. Basin St.)
#bottom right:29.957063,-90.072809 (Corner of N. basin St and Canal St.)
#center of WSV: 29.958675,-90.073182
longitudeBSV <- c(-90.080601, -90.079958, -90.077019, -90.077834) #longitude for the polygon
latitudeBSV <- c(29.954152,29.955334,29.954153,29.952984) #latitude for the polygon
lonlatBSV <- as.data.frame(cbind(longitudeBSV,latitudeBSV)) #create dataframe for the polygon
saveRDS(lonlatBSV, "BSVpolygon.rds")
longitudeWSV <- c(-90.076034, -90.073988, -90.070663,-90.072809)
latitudeWSV <- c(29.959378, 29.961675,29.959434,29.957063)
lonlatSV <- as.data.frame(cbind(longitudeWSV,latitudeWSV))
saveRDS(lonlatSV, "SVpolygon.rds")
#turns out everything above this is useless because I couldnt figure out how to save this in a conce manner so I have to load BELOW into EVERYTHING I do for leaflet unless someone can give me a better option. 
SVpolygon <- matrix(c(-90.076779, 29.958558, -90.073984, 29.961689, -90.070555, 29.959363, -90.073466, 29.956301, -90.076779, 29.958558), ncol = 2, byrow = TRUE) #opening AND CLOSING polygons to create full shpae, thats why ti wasnt working before
BSVpolygon <- matrix(c(-90.080601, 29.95415, -90.079958, 29.955334, -90.077019, 29.954153, -90.077834, 29.952984, -90.080601, 29.954152), ncol = 2, byrow = TRUE) #opening AND CLOSING polygons to create full shpae, thats why it wasnt working before
```

### Leaflet codes for base maps to be expanded upon:

```{r}
#base interactive leaflet map to be created
SVbasemap <- leaflet() %>% 
  addProviderTiles("CartoDB.Positron") %>%
  addPolygons(data = SVpolygon, color = "gray3", weight = 2, fillColor = "gray3", fillOpacity = 0.2)
SVbasemap
```

```{r}
#BSV leaflet basemap
leafletBSV <- leaflet() %>% 
  addProviderTiles("CartoDB.Positron") %>% 
  addPolygons(data= BSVpolygon, color = "red", weight = 2, fillColor = "red", fillOpacity = 0.2) %>% 
  addPolygons(data = SVpolygon, color = "gray3", weight = 2, fillColor = "gray3", fillOpacity = 0.2)
leafletBSV
```

### Load some icons for an interactive map:

```{r}
#there is not much logic for these colors yet, but I hope to make each one represent a race identification but I havent made those distinctions or decisions yet.
icon.black <- makeIcon(iconUrl = "icons/blackicon.png", iconWidth = 24, iconHeight = 24)
icon.darkblue <- makeIcon(iconUrl = "icons/darkblue.png", iconWidth = 24, iconHeight = 24)
icon.darkgreen <- makeIcon(iconUrl = "icons/darkgreenicon.png", iconWidth = 24, iconHeight = 24)
icon.darkpurple <- makeIcon(iconUrl = "icons/darkpurpleicon.png", iconWidth = 24, iconHeight = 24)
icon.lightblue <- makeIcon(iconUrl = "icons/lightblueicon.png", iconWidth = 24, iconHeight = 24)
icon.pink <- makeIcon(iconUrl = "icons/pinkicon.png", iconWidth = 24, iconHeight = 24)
icon.purple <- makeIcon(iconUrl = "icons/purple.png", iconWidth = 24, iconHeight = 24)
icon.white <- makeIcon(iconUrl = "icons/whiteicon.png", iconWidth = 24, iconHeight = 24)
```

### Data Exploration:

#### Exploring the data using tidyr to find an angle:

```{r}
race.entries <- entries %>% 
  group_by(lat, lon, race.id, year) %>% 
  summarise(race.count = n()) %>% 
  group_by(race.id) %>% 
  mutate(scaled_count = scale(race.count)) %>% 
  ungroup()
```

#### Race density data frames per year:

```{r}
e.1900.density <- entries %>% 
  filter(year == 1900) %>% 
  group_by(lat, lon, race.id,year) %>% 
  filter(!is.na(race.id) & race.id != "") %>% 
  summarise(count = n()) %>% 
   arrange(desc(count))
e.1901.density <- entries %>% 
  filter(year == 1901) %>% 
  group_by(lat, lon, race.id,year) %>% 
  filter(!is.na(race.id) & race.id != "") %>% 
  summarise(count = n()) %>% 
  arrange(desc(count))
e.1903.density <- entries %>% 
  filter(year == 1903) %>% 
  group_by(lat, lon, race.id,year) %>% 
  filter(!is.na(race.id) & race.id != "") %>% 
  summarise(count = n()) %>% 
  arrange(desc(count))
e.1905.density <- entries %>% 
  filter(year == 1905) %>% 
  group_by(lat, lon, race.id,year) %>% 
  filter(!is.na(race.id) & race.id != "") %>% 
  summarise(count = n()) %>% 
  arrange(desc(count))
e.1906.density <- entries %>% 
  filter(year == 1906) %>% 
  group_by(lat, lon, race.id,year) %>% 
  filter(!is.na(race.id) & race.id != "") %>% 
  summarise(count = n()) %>% 
   arrange(desc(count))
e.1907.density <- entries %>% 
  filter(year == 1907) %>% 
  group_by(lat, lon, race.id,year) %>% 
  filter(!is.na(race.id) & race.id != "") %>% 
  summarise(count = n()) %>% 
   arrange(desc(count))
e.1908.density <- entries %>% 
  filter(year == 1908) %>% 
  group_by(lat, lon, race.id,year) %>% 
  filter(!is.na(race.id) & race.id != "") %>% 
  summarise(count = n()) %>% 
   arrange(desc(count))
e.1912.density <- entries %>% 
  filter(year == 1912) %>% 
  group_by(lat, lon, race.id,year) %>% 
  filter(!is.na(race.id) & race.id != "") %>% 
  summarise(count = n()) %>% 
   arrange(desc(count))
e.1915.density <- entries %>% 
  filter(year == 1915) %>% 
  group_by(lat, lon, race.id,year) %>% 
  filter(!is.na(race.id) & race.id != "") %>% 
  summarise(count = n()) %>% 
   arrange(desc(count))
```

### Static Maps for ggmap:

```{r}
centerofSV <- c(lon = -90.073891, lat = 29.95905) #center coordinated for Static SV Map
staticSV <- get_googlemap(center = centerofSV, zoom = 17, maptype = "satellite", color = "bw") #creating the static map
SVstaticmap <- ggmap(staticSV)
SVstaticmap
```

```{r}
SVpolygon <- matrix(c(-90.076779, 29.958558, -90.073984, 29.961689, -90.070555, 29.959363, -90.073466, 29.956301, -90.076779, 29.958558), ncol = 2, byrow = TRUE) #boundaries polygon
longitudeSV <- c(-90.076779,-90.073984, -90.070555, -90.073466) #longitude of my polygon from above
latitudeSV <- c(29.958558, 29.961689, 29.959363,  29.956301) #latitude of my polygon from above
lonlatSV <- as.data.frame(cbind(longitudeSV,latitudeSV)) #creating a dataframe for my polygon
SVwithlabels <- ggmap(staticSV) + #load static map at zoom 17
  geom_polygon(data = lonlatSV, aes(x=longitudeSV, y=latitudeSV),alpha = 0.1, color = "red", fill = "red") + # add the polygon on top of static map
  annotate("text", x=-90.073891,y=29.95905,label="Storyville Vice District", color="white", size=5) +   #label the district 
  annotate("text", x=-90.072649,y=29.960785,label="St. Louis Street", color="white", size=3, angle = -39) + 
  annotate("text", x=-90.075394,y=29.960117,label="North Robertson Street", color="white", size=3, angle = 52) +
  annotate("text", x=-90.075277,y=29.95746,label="Canal Street", color="white", size=3, angle = -39) +
  annotate("text", x=-90.071914,y=29.957815,label="North Basin Street", color="white", size=3, angle = 52) + #annotate the street names and adjust their angle
  labs(x = "Longitude", y = "Latitude") #add X/Y axis labels
SVwithlabels
```

```{r}
#creating the BSV and WSV coordinates and labels
#black storyville coords: using the city ordinance 4118 to create my data.
#bottom left:29.954152,-90.080601
#top left: 29.955334,-90.079958
#top right:29.954153,-90.077019
#bottom right: 29.952984,-90.077834
#center for both 29.956423,-90.07619
longitudeBSV <- c(-90.080601, -90.079958, -90.077019, -90.077834) #longitude for the polygon
latitudeBSV <- c(29.954152,29.955334,29.954153,29.952984) #latitude for the polygon
lonlatBSV <- as.data.frame(cbind(longitudeBSV,latitudeBSV)) #create dataframe for the polygon
#white storyville coords 
#bottom left:29.959378,-90.076034
#top left: 29.961675,-90.073988
#top right:29.959434,-90.070663
#bottom right:29.957063,-90.072809
#center of WSV: 29.958675,-90.073182
longitudeWSV <- c(-90.076034, -90.073988, -90.070663,-90.072809)
latitudeWSV <- c(29.959378, 29.961675,29.959434,29.957063)
lonlatWSV <- as.data.frame(cbind(longitudeWSV,latitudeWSV))
#start creating the static map for this visualization
centerofBSVandWSV <-  c(lon = -90.07619, lat =29.956423) #find the center for a new statis map
BSVandWSVstatic <-  get_map(location = centerofBSVandWSV, zoom = 16, maptype = "satellite", color = "bw") #create static map
BSVlabeled <- ggmap(BSVandWSVstatic) + #load static map at zoom 16
  geom_polygon(data = lonlatBSV, aes(x=longitudeBSV, y=latitudeBSV),alpha = 0.1, color = "gold", fill = "gold") + # add the BSV polygon on top of static map
  annotate("text", x=-90.078700 ,y=29.954400,label="Black Storyville",colour="white",size=8) + #label the black storyville
  geom_polygon(data = lonlatWSV, aes(x=longitudeWSV, y=latitudeWSV),alpha = 0.1, color = "red", fill = "red") + #Add the SV polygon to the static map
  annotate("text", x=-90.073182,y=29.95950,label="White Storyville",colour="white",size=8) +   #label the SV district
  labs(x = "Longitude", y = "Latitude")
BSVlabeled
```
